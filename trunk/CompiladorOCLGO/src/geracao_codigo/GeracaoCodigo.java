
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 06 06:29:21 GMT-03:00 2011
//----------------------------------------------------

package geracao_codigo;

import java_cup.runtime.Symbol;
import util.sym;
import java.util.LinkedList;
import util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 06 06:29:21 GMT-03:00 2011
  */
public class GeracaoCodigo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GeracaoCodigo() {super();}

  /** Constructor which sets the default scanner. */
  public GeracaoCodigo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeracaoCodigo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\056\002\000\002\002" +
    "\007\000\002\057\002\000\002\002\004\000\002\003\004" +
    "\000\002\003\002\000\002\012\004\000\002\013\004\000" +
    "\002\013\002\000\002\014\004\000\002\060\002\000\002" +
    "\004\006\000\002\005\005\000\002\006\011\000\002\007" +
    "\003\000\002\007\002\000\002\011\003\000\002\011\005" +
    "\000\002\017\006\000\002\015\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\021\005\000\002\010\004\000\002\045\005\000" +
    "\002\045\002\000\002\022\004\000\002\023\005\000\002" +
    "\023\002\000\002\024\004\000\002\025\005\000\002\025" +
    "\002\000\002\026\004\000\002\027\005\000\002\027\002" +
    "\000\002\044\004\000\002\044\003\000\002\061\002\000" +
    "\002\030\005\000\002\062\002\000\002\063\002\000\002" +
    "\031\007\000\002\031\002\000\002\032\003\000\002\032" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\005\000\002\043\003\000\002\043\003\000" +
    "\002\037\006\000\002\016\011\000\002\064\002\000\002" +
    "\033\006\000\002\042\005\000\002\042\002\000\002\034" +
    "\005\000\002\034\005\000\002\034\002\000\002\065\002" +
    "\000\002\035\010\000\002\036\005\000\002\036\002\000" +
    "\002\055\004\000\002\055\002\000\002\040\004\000\002" +
    "\040\004\000\002\040\002\000\002\041\005\000\002\041" +
    "\005\000\002\041\002\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\050\003\000\002\050" +
    "\003\000\002\047\003\000\002\047\003\000\002\046\003" +
    "\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\002\ufffe\004\006\006\ufffe\001\002\000" +
    "\004\002\235\001\002\000\006\002\ufffb\006\017\001\002" +
    "\000\004\060\010\001\002\000\006\005\000\006\000\001" +
    "\002\000\100\002\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8" +
    "\013\ufff8\015\012\016\ufff8\017\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\001\002\000\076\002\ufffa\005\ufffa\006\ufffa\007\ufffa\012" +
    "\ufffa\013\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\001" +
    "\002\000\004\060\010\001\002\000\076\002\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\037" +
    "\ufff9\040\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\001\002\000\006\005\ufffb\006\017\001" +
    "\002\000\010\002\ufffb\005\ufffb\006\017\001\002\000\004" +
    "\005\232\001\002\000\004\060\021\001\002\000\004\007" +
    "\ufff6\001\002\000\004\015\022\001\002\000\004\060\010" +
    "\001\002\000\004\016\024\001\002\000\006\021\ufff1\060" +
    "\026\001\002\000\004\021\ufff2\001\002\000\004\014\052" +
    "\001\002\000\004\021\033\001\002\000\006\013\031\021" +
    "\ufff0\001\002\000\004\060\026\001\002\000\004\021\uffef" +
    "\001\002\000\004\014\034\001\002\000\016\010\043\051" +
    "\035\052\040\053\046\054\042\060\010\001\002\000\010" +
    "\007\uffe6\013\uffe6\021\uffe6\001\002\000\004\016\047\001" +
    "\002\000\010\007\uffeb\013\uffeb\021\uffeb\001\002\000\010" +
    "\007\uffe8\013\uffe8\021\uffe8\001\002\000\010\007\uffec\013" +
    "\uffec\021\uffec\001\002\000\010\007\uffe9\013\uffe9\021\uffe9" +
    "\001\002\000\006\016\uffed\020\uffed\001\002\000\004\007" +
    "\ufff3\001\002\000\010\007\uffea\013\uffea\021\uffea\001\002" +
    "\000\010\007\uffe7\013\uffe7\021\uffe7\001\002\000\016\010" +
    "\043\051\035\052\040\053\046\054\042\060\010\001\002" +
    "\000\004\021\051\001\002\000\010\007\uffee\013\uffee\021" +
    "\uffee\001\002\000\016\010\043\051\035\052\040\053\046" +
    "\054\042\060\010\001\002\000\006\013\uffe1\021\uffe1\001" +
    "\002\000\004\016\ufff7\001\002\000\004\007\056\001\002" +
    "\000\004\014\060\001\002\000\010\002\ufff5\005\ufff5\006" +
    "\ufff5\001\002\000\030\010\043\011\106\016\075\036\063" +
    "\041\065\046\100\055\103\056\105\057\074\060\010\061" +
    "\073\001\002\000\062\002\uffd3\005\uffd3\006\uffd3\013\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\001\002\000\066\002\uffd2\005\uffd2\006\uffd2\012\uffd2" +
    "\013\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\001\002\000\024\010\uffa0\011\uffa0" +
    "\016\uffa0\041\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\001\002\000\004\020\216\001\002\000\030\010\043" +
    "\011\106\016\075\036\063\041\065\046\100\055\103\056" +
    "\105\057\074\060\010\061\073\001\002\000\052\002\uffdb" +
    "\005\uffdb\006\uffdb\013\uffdb\021\uffdb\022\uffdb\023\uffdb\026" +
    "\177\027\204\030\201\031\203\032\200\033\176\034\uffdb" +
    "\035\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\001" +
    "\002\000\062\002\uffd5\005\uffd5\006\uffd5\013\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\173\050\172\001" +
    "\002\000\066\002\uffc8\005\uffc8\006\uffc8\012\uffc8\013\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8" +
    "\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\001\002\000\056\002\uffd8\005\uffd8\006\uffd8" +
    "\013\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\043\uffd8\044\uffd8\045\163\046\164\001" +
    "\002\000\036\002\uffde\005\uffde\006\uffde\013\uffde\021\uffde" +
    "\022\uffde\023\uffde\034\154\035\156\037\157\040\153\042" +
    "\uffde\043\uffde\044\uffde\001\002\000\066\002\uffe3\005\uffe3" +
    "\006\uffe3\012\uffe3\013\uffe3\021\uffe3\022\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002\000\066" +
    "\002\uffe2\005\uffe2\006\uffe2\012\uffe2\013\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\001\002\000\030\010\043\011\106\016\075\036\063\041" +
    "\065\046\100\055\103\056\105\057\074\060\010\061\073" +
    "\001\002\000\024\010\043\011\106\016\075\041\065\055" +
    "\103\056\105\057\074\060\010\061\073\001\002\000\066" +
    "\002\uffc5\005\uffc5\006\uffc5\012\uffc5\013\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\001\002\000\024\010\uffa1\011\uffa1\016\uffa1\041\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\001\002\000\066" +
    "\002\uffc9\005\uffc9\006\uffc9\012\uffc9\013\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\001\002\000\072\002\uffc2\005\uffc2\006\uffc2\012\uffc2\013" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\001\002\000\066\002" +
    "\uffe4\005\uffe4\006\uffe4\012\uffe4\013\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\001" +
    "\002\000\066\002\uffca\005\uffca\006\uffca\012\uffca\013\uffca" +
    "\021\uffca\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca" +
    "\040\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\001\002\000\066\002\uffe5\005\uffe5\006\uffe5" +
    "\012\uffe5\013\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000\066\002\uffc6" +
    "\005\uffc6\006\uffc6\012\uffc6\013\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002" +
    "\000\010\002\ufff4\005\ufff4\006\ufff4\001\002\000\072\002" +
    "\uffbf\005\uffbf\006\uffbf\012\uffbf\013\uffbf\016\uffbf\017\112" +
    "\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf" +
    "\040\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\001\002\000\070\002\uffbc\005\uffbc\006\uffbc" +
    "\012\uffbc\013\uffbc\016\126\021\uffbc\022\uffbc\023\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000\032" +
    "\010\043\011\106\016\075\022\uffb3\036\063\041\065\046" +
    "\100\055\103\056\105\057\074\060\114\061\073\001\002" +
    "\000\004\022\125\001\002\000\056\012\ufff8\013\116\015" +
    "\012\016\ufff8\017\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\037\ufff8\040\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\001\002\000\012\013\116\021\uffb0\022\uffb0\023\uffb0\001" +
    "\002\000\030\010\043\011\106\016\075\036\063\041\065" +
    "\046\100\055\103\056\105\057\074\060\120\061\073\001" +
    "\002\000\010\021\uffb5\022\uffb5\023\uffb5\001\002\000\060" +
    "\012\ufff8\013\116\015\012\016\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\001\002\000\012\013\116" +
    "\021\uffb0\022\uffb0\023\uffb0\001\002\000\010\021\uffb2\022" +
    "\uffb2\023\uffb2\001\002\000\010\021\uffb1\022\uffb1\023\uffb1" +
    "\001\002\000\010\021\uffb4\022\uffb4\023\uffb4\001\002\000" +
    "\070\002\uffc0\005\uffc0\006\uffc0\012\uffc0\013\uffc0\016\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0" +
    "\040\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\001\002\000\032\010\043\011\106\016\075" +
    "\021\uffb3\036\063\041\065\046\100\055\103\056\105\057" +
    "\074\060\131\061\073\001\002\000\066\002\uffc1\005\uffc1" +
    "\006\uffc1\012\uffc1\013\uffc1\021\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\004" +
    "\021\146\001\002\000\060\012\ufff8\013\134\014\uffb8\015" +
    "\012\016\ufff8\017\ufff8\021\ufff8\024\uffb8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\037\ufff8\040\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\001\002\000\004\021\133\001\002\000\066\002\uffbd\005" +
    "\uffbd\006\uffbd\012\uffbd\013\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\001\002\000" +
    "\030\010\043\011\106\016\075\036\063\041\065\046\100" +
    "\055\103\056\105\057\074\060\144\061\073\001\002\000" +
    "\006\014\136\024\uffb6\001\002\000\004\060\010\001\002" +
    "\000\004\024\140\001\002\000\030\010\uffbb\011\uffbb\016" +
    "\uffbb\036\uffbb\041\uffbb\046\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\001\002\000\030\010\043\011\106\016" +
    "\075\036\063\041\065\046\100\055\103\056\105\057\074" +
    "\060\010\061\073\001\002\000\004\021\uffba\001\002\000" +
    "\004\024\uffb7\001\002\000\060\012\ufff8\013\134\014\uffb8" +
    "\015\012\016\ufff8\017\ufff8\021\ufff8\024\uffb8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\037\ufff8\040\ufff8\045\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\001\002\000\006\014\uffb9\024\uffb9\001\002\000\066" +
    "\002\uffbe\005\uffbe\006\uffbe\012\uffbe\013\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\001\002\000\062\002\uffd4\005\uffd4\006\uffd4\013\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\004\021\151\001\002\000\066\002\uffc7\005" +
    "\uffc7\006\uffc7\012\uffc7\013\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000" +
    "\030\010\043\011\106\016\075\036\063\041\065\046\100" +
    "\055\103\056\105\057\074\060\010\061\073\001\002\000" +
    "\030\010\uffac\011\uffac\016\uffac\036\uffac\041\uffac\046\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\001\002\000" +
    "\030\010\uffaf\011\uffaf\016\uffaf\036\uffaf\041\uffaf\046\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000" +
    "\026\002\uffe0\005\uffe0\006\uffe0\013\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\042\uffe0\043\uffe0\044\uffe0\001\002\000\030\010" +
    "\uffae\011\uffae\016\uffae\036\uffae\041\uffae\046\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\001\002\000\030\010" +
    "\uffad\011\uffad\016\uffad\036\uffad\041\uffad\046\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\001\002\000\036\002" +
    "\uffde\005\uffde\006\uffde\013\uffde\021\uffde\022\uffde\023\uffde" +
    "\034\154\035\156\037\157\040\153\042\uffde\043\uffde\044" +
    "\uffde\001\002\000\026\002\uffdf\005\uffdf\006\uffdf\013\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\042\uffdf\043\uffdf\044\uffdf\001" +
    "\002\000\052\002\uffda\005\uffda\006\uffda\013\uffda\021\uffda" +
    "\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\042\uffda" +
    "\043\uffda\044\uffda\001\002\000\030\010\uffa5\011\uffa5\016" +
    "\uffa5\036\uffa5\041\uffa5\046\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\001\002\000\030\010\uffa4\011\uffa4\016" +
    "\uffa4\036\uffa4\041\uffa4\046\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\001\002\000\030\010\043\011\106\016" +
    "\075\036\063\041\065\046\100\055\103\056\105\057\074" +
    "\060\010\061\073\001\002\000\056\002\uffd8\005\uffd8\006" +
    "\uffd8\013\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037" +
    "\uffd8\040\uffd8\042\uffd8\043\uffd8\044\uffd8\045\163\046\164" +
    "\001\002\000\052\002\uffd9\005\uffd9\006\uffd9\013\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\001\002\000\056\002\uffd7\005\uffd7" +
    "\006\uffd7\013\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\001\002\000\030\010\043\011\106\016\075\036\063" +
    "\041\065\046\100\055\103\056\105\057\074\060\010\061" +
    "\073\001\002\000\030\010\uffa2\011\uffa2\016\uffa2\036\uffa2" +
    "\041\uffa2\046\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\001\002\000\030\010\uffa3\011\uffa3\016\uffa3\036\uffa3" +
    "\041\uffa3\046\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\001\002\000\062\002\uffd5\005\uffd5\006\uffd5\013\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\173\050" +
    "\172\001\002\000\056\002\uffd6\005\uffd6\006\uffd6\013\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000" +
    "\030\010\uffa6\011\uffa6\016\uffa6\036\uffa6\041\uffa6\046\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\001\002\000" +
    "\030\010\uffab\011\uffab\016\uffab\036\uffab\041\uffab\046\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\001\002\000" +
    "\030\010\uffa7\011\uffa7\016\uffa7\036\uffa7\041\uffa7\046\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002\000" +
    "\030\010\uffa9\011\uffa9\016\uffa9\036\uffa9\041\uffa9\046\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\001\002\000" +
    "\036\002\uffdd\005\uffdd\006\uffdd\013\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\001\002\000\030\010\uffa8\011\uffa8\016\uffa8" +
    "\036\uffa8\041\uffa8\046\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\001\002\000\030\010\uffaa\011\uffaa\016\uffaa" +
    "\036\uffaa\041\uffaa\046\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\001\002\000\030\010\043\011\106\016\075" +
    "\036\063\041\065\046\100\055\103\056\105\057\074\060" +
    "\010\061\073\001\002\000\052\002\uffdb\005\uffdb\006\uffdb" +
    "\013\uffdb\021\uffdb\022\uffdb\023\uffdb\026\177\027\204\030" +
    "\201\031\203\032\200\033\176\034\uffdb\035\uffdb\037\uffdb" +
    "\040\uffdb\042\uffdb\043\uffdb\044\uffdb\001\002\000\036\002" +
    "\uffdc\005\uffdc\006\uffdc\013\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\034\uffdc\035\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\001\002\000\004\043\211\001\002\000\030\010\043" +
    "\011\106\016\075\036\063\041\065\046\100\055\103\056" +
    "\105\057\074\060\010\061\073\001\002\000\004\042\213" +
    "\001\002\000\030\010\043\011\106\016\075\036\063\041" +
    "\065\046\100\055\103\056\105\057\074\060\010\061\073" +
    "\001\002\000\004\044\215\001\002\000\066\002\uffc3\005" +
    "\uffc3\006\uffc3\012\uffc3\013\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000" +
    "\032\010\043\011\106\016\075\023\uffb3\036\063\041\065" +
    "\046\100\055\103\056\105\057\074\060\114\061\073\001" +
    "\002\000\004\023\220\001\002\000\066\002\uffc4\005\uffc4" +
    "\006\uffc4\012\uffc4\013\uffc4\021\uffc4\022\uffc4\023\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002\000\066" +
    "\002\uffcd\005\uffcd\006\uffcd\012\225\013\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\025\223\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\001\002\000\004\060\uffd0\001\002\000\004\060\uffcc\001" +
    "\002\000\062\002\uffd1\005\uffd1\006\uffd1\013\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\001" +
    "\002\000\004\060\uffcb\001\002\000\004\060\010\001\002" +
    "\000\066\002\uffcf\005\uffcf\006\uffcf\012\uffcf\013\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\001\002\000\066\002\uffcd\005\uffcd\006\uffcd\012" +
    "\225\013\uffcd\021\uffcd\022\uffcd\023\uffcd\025\223\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\001\002\000\062\002\uffce\005" +
    "\uffce\006\uffce\013\uffce\021\uffce\022\uffce\023\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\ufffc\005\ufffc\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\002\003\057\004\001\001\000\002\001" +
    "\001\000\006\003\233\004\014\001\001\000\004\012\006" +
    "\001\001\000\004\056\013\001\001\000\004\013\010\001" +
    "\001\000\002\001\001\000\004\012\012\001\001\000\002" +
    "\001\001\000\006\003\015\004\014\001\001\000\006\003" +
    "\232\004\014\001\001\000\002\001\001\000\004\006\017" +
    "\001\001\000\004\060\054\001\001\000\004\014\022\001" +
    "\001\000\004\012\053\001\001\000\002\001\001\000\010" +
    "\007\026\011\024\021\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\031\021\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\036\015\035\017\044\020\043\054\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\036\015\035\017\044\020\047" +
    "\054\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\036\015\035\017\044\020\052\054\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\106" +
    "\012\101\015\063\016\076\022\071\024\065\026\070\030" +
    "\060\033\067\037\103\043\061\044\066\046\075\053\100" +
    "\001\001\000\002\001\001\000\004\061\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\010\207\012\101" +
    "\015\063\016\076\022\071\024\065\026\070\030\060\033" +
    "\067\037\103\043\061\044\066\046\075\053\100\001\001" +
    "\000\006\023\201\051\204\001\001\000\006\027\167\047" +
    "\170\001\001\000\002\001\001\000\006\025\161\050\164" +
    "\001\001\000\006\045\154\052\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\010\147\012\101\015\063" +
    "\016\076\022\071\024\065\026\070\030\060\033\067\037" +
    "\103\043\061\044\066\046\075\053\100\001\001\000\022" +
    "\012\101\015\063\016\076\030\146\033\067\037\103\043" +
    "\061\053\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\110\001\001\000\004\034" +
    "\126\001\001\000\040\010\114\012\101\015\063\016\076" +
    "\022\071\024\065\026\070\030\060\033\067\037\103\040" +
    "\112\043\061\044\066\046\075\053\100\001\001\000\002" +
    "\001\001\000\006\013\010\041\123\001\001\000\004\041" +
    "\116\001\001\000\036\010\120\012\101\015\063\016\076" +
    "\022\071\024\065\026\070\030\060\033\067\037\103\043" +
    "\061\044\066\046\075\053\100\001\001\000\002\001\001" +
    "\000\006\013\010\041\122\001\001\000\004\041\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\114\012\101\015\063\016" +
    "\076\022\071\024\065\026\070\030\060\033\067\035\131" +
    "\037\103\040\127\043\061\044\066\046\075\053\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\010" +
    "\036\134\041\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\120\012\101\015\063\016\076\022\071" +
    "\024\065\026\070\030\060\033\067\037\103\043\061\044" +
    "\066\046\075\053\100\001\001\000\004\055\136\001\001" +
    "\000\004\012\142\001\001\000\002\001\001\000\004\065" +
    "\140\001\001\000\036\010\141\012\101\015\063\016\076" +
    "\022\071\024\065\026\070\030\060\033\067\037\103\043" +
    "\061\044\066\046\075\053\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\010\036\144\041\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\012\101\015" +
    "\063\016\076\022\157\024\065\026\070\030\060\033\067" +
    "\037\103\043\061\044\066\046\075\053\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\160\052\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\101\015\063\016\076\026" +
    "\165\030\060\033\067\037\103\043\061\044\066\046\075" +
    "\053\100\001\001\000\006\025\166\050\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\101\015\063" +
    "\016\076\030\060\033\067\037\103\043\061\044\173\046" +
    "\075\053\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\174\047\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\012\101\015\063\016\076\024\205\026\070" +
    "\030\060\033\067\037\103\043\061\044\066\046\075\053" +
    "\100\001\001\000\006\023\206\051\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\010\211\012\101\015" +
    "\063\016\076\022\071\024\065\026\070\030\060\033\067" +
    "\037\103\043\061\044\066\046\075\053\100\001\001\000" +
    "\002\001\001\000\036\010\213\012\101\015\063\016\076" +
    "\022\071\024\065\026\070\030\060\033\067\037\103\043" +
    "\061\044\066\046\075\053\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\010\114\012\101\015\063\016" +
    "\076\022\071\024\065\026\070\030\060\033\067\037\103" +
    "\040\216\043\061\044\066\046\075\053\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\223\032\221" +
    "\001\001\000\004\062\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\101\033\226" +
    "\001\001\000\004\063\227\001\001\000\006\031\230\032" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeracaoCodigo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeracaoCodigo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeracaoCodigo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public void report_error(String message, Object info) {
		Util.report_error(message, info);
	}
	public void syntax_error(Symbol cur_token) {
		Util.syntax_error(cur_token);
	}
	public void debug_message(String mess) {
		Util.debug_message(mess);
	}
	public void debug_shift(Symbol shift_tkn) {
		Util.debug_shift(shift_tkn);
	}
	public void debug_reduce(int prod_num, int nt_num, int rhs_size) {
		Util.debug_reduce(prod_num, nt_num, rhs_size);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GeracaoCodigo$actions {
  private final GeracaoCodigo parser;

  /** Constructor */
  CUP$GeracaoCodigo$actions(GeracaoCodigo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GeracaoCodigo$do_action(
    int                        CUP$GeracaoCodigo$act_num,
    java_cup.runtime.lr_parser CUP$GeracaoCodigo$parser,
    java.util.Stack            CUP$GeracaoCodigo$stack,
    int                        CUP$GeracaoCodigo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeracaoCodigo$result;

      /* select the action based on the action number */
      switch (CUP$GeracaoCodigo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unaryOperator ::= NOT 
            {
              Object RESULT =null;
		 
	Elemento elem = new Elemento("NOT");
	elem.setAtributo("code", "!"); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("unaryOperator",36, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unaryOperator ::= MINUS 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("-");
	elem.setAtributo("code", "-"); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("unaryOperator",36, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // multiplyOperator ::= DIVIDE 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("/");
	elem.setAtributo("code", "/"); 
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("multiplyOperator",37, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // multiplyOperator ::= TIMES 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("*");
	elem.setAtributo("code", "*"); 
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("multiplyOperator",37, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // addOperator ::= MINUS 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("-");
	elem.setAtributo("code", "-"); 
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("addOperator",38, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // addOperator ::= PLUS 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("+");
	elem.setAtributo("code", "+"); 
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("addOperator",38, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relationalOperator ::= LT 
            {
              Object RESULT =null;
		 
	Elemento elem = new Elemento("<");
	elem.setAtributo("code", "<"); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // relationalOperator ::= GT 
            {
              Object RESULT =null;
		 
	Elemento elem = new Elemento(">");
	elem.setAtributo("code", ">"); 
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // relationalOperator ::= GE 
            {
              Object RESULT =null;
		 
	Elemento elem = new Elemento(">=");
	elem.setAtributo("code", ">="); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // relationalOperator ::= LE 
            {
              Object RESULT =null;
		 
	Elemento elem = new Elemento("<=");
	elem.setAtributo("code", "<="); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // relationalOperator ::= NE 
            {
              Object RESULT =null;
		 
	Elemento elem = new Elemento("<>");
	elem.setAtributo("code", "!="); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // relationalOperator ::= EQ 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("=");
	elem.setAtributo("code", "=="); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logicalOperator ::= IMPLIES 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("IMPLIES");
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logicalOperator ::= XOR 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("XOR");
	elem.setAtributo("code", "!="); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logicalOperator ::= OR 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("OR");
	elem.setAtributo("code", "||"); 
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logicalOperator ::= AND 
            {
              Object RESULT =null;
		
	Elemento elem = new Elemento("AND");
	elem.setAtributo("code", "&&"); 
	RESULT = elem; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressionParameterAux ::= 
            {
              Object RESULT =null;
		 RESULT = new Parametros(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("expressionParameterAux",31, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressionParameterAux ::= COMMA IDENTIFIER expressionParameterAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	String tipo = XMIParserBasic.getInstancia().getAttributeType(id.toString());
	Elemento val = new Elemento(id.toString(), idleft, idright);
	if(tipo == null){
		LoggerSemantico.getInstance().addError(StringErro.naoExiste("Identificador", id.toString()));
		throw new ErroFatal();
	}
	
	val.setAtributo("tipo", tipo);
	val.setAtributo("code", val.valor);
	Parametros p = (Parametros) aux;
	p.addElemento(val);
	p.push(tipo);
	RESULT = p;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("expressionParameterAux",31, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressionParameterAux ::= COMMA oclExpression expressionParameterAux 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) exp;
	Parametros p = (Parametros) aux;
	p.addElemento(val);
	p.push(val.getAtributo("tipo"));
	RESULT = p;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("expressionParameterAux",31, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressionParameter ::= 
            {
              Object RESULT =null;
		 RESULT = new Parametros(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("expressionParameter",30, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expressionParameter ::= IDENTIFIER expressionParameterAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	String tipo = XMIParserBasic.getInstancia().getAttributeType(id.toString());
	Elemento val = new Elemento(id.toString(), idleft, idright);
	if(tipo == null){
		LoggerSemantico.getInstance().addError(StringErro.naoExiste("Identificador", val.toString()));
		throw new ErroFatal();
	}
	
	val.setAtributo("tipo", tipo);
	val.setAtributo("code", val.valor);
	Parametros p = (Parametros) aux;
	p.addElemento(val);
	p.push(tipo);
	RESULT = p;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("expressionParameter",30, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressionParameter ::= oclExpression expressionParameterAux 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) exp;
	Parametros p = (Parametros) aux;
	p.addElemento(val);
	p.push(val.getAtributo("tipo"));
	RESULT = p;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("expressionParameter",30, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // colonPathName ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("colonPathName",43, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // colonPathName ::= COLON pathName 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = pa.toString(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("colonPathName",43, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaratorAux ::= 
            {
              Object RESULT =null;
		 RESULT = new Parametros(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("declaratorAux",28, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaratorAux ::= COMMA IDENTIFIER declaratorAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Parametros p = (Parametros) aux;
	Elemento val = new Elemento(id.toString(), idleft, idright);
	if(XMIParserBasic.getInstancia().containsVariavel(val.valor) || p.lista.contains(val.valor)){
		LoggerSemantico.getInstance().addError(StringErro.jaExiste("Identificador", val.toString()));
		throw new ErroFatal();
	}
	p.push(val.valor);
	RESULT = p;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("declaratorAux",28, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declarator ::= IDENTIFIER declaratorAux colonPathName BAR NT$7 oclExpression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object path = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) exp;
	Parametros p = (Parametros) aux;
	p.push(id.toString());
	p.push(val.getAtributo("tipo"));
	RESULT = p;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("declarator",27, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object path = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;

	Parametros p = (Parametros) aux;
	Elemento val = new Elemento(id.toString(), idleft, idright);
	if(XMIParserBasic.getInstancia().containsVariavel(val.valor) || p.lista.contains(val.valor)){
		LoggerSemantico.getInstance().addError(StringErro.jaExiste("Identificador", val.toString()));
		throw new ErroFatal();
	}
	String tipo = XMIParserBasic.getInstancia().context.lastElement();
	p.push(val.valor);
	if(path != null){
		if(!Elemento.tiposEquivalentes(XMIParserBasic.getInstancia().context.lastElement(), path.toString())){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), XMIParserBasic.getInstancia().context.lastElement()));
			throw new ErroFatal();
		}
		tipo = Elemento.max(XMIParserBasic.getInstancia().context.lastElement(), path.toString());
	}
	XMIParserBasic.getInstancia().addVariavel(p.lista,tipo);

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // propertyCallParameters ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",26, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // propertyCallParameters ::= LEFT_PAR declarator RIGHT_PAR 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		
	Parametros dec = (Parametros) d;
	Parametros ret = new Parametros();
	ret.push(dec.lista.get(0));  
	RESULT = ret; 
	XMIParserBasic.getInstancia().deleteVariavel(dec.lista);

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",26, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // propertyCallParameters ::= LEFT_PAR expressionParameter RIGHT_PAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		 RESULT = exp; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",26, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // qualifiers ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("qualifiers",32, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // qualifiers ::= LEFT_BRK expressionParameter RIGHT_BRK 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("qualifiers",32, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // propertyCall ::= pathName NT$6 qualifiers propertyCallParameters 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	String tipo = XMIParserBasic.getInstancia().getOperationType(p.toString());
	Elemento val = new Elemento(p.toString(), pleft, pright);
	
	if(tipo == null){
		tipo = XMIParserBasic.getInstancia().getAttributeType(p.toString());
		if(tipo == null){
			LoggerSemantico.getInstance().addError(StringErro.naoExiste("Identificador", val.toString()));
			throw new ErroFatal();
		}
		if(par != null){
			LoggerSemantico.getInstance().addError(StringErro.naoExiste("Funcao", val.toString()));
			throw new ErroFatal();
		}
		val.setAtributo("code", val.valor);
		if(!Elemento.ehOperacaoColecao(p.toString())){
			XMIParserBasic.getInstancia().getAttributeTypeConsulta(p.toString());
		}
	}else{
	    
		LinkedList<String> parametros = (LinkedList<String>) XMIParserBasic.getInstancia().getParametersType(p.toString());
		Parametros pa = (Parametros) par;
		if(!pa.parametrosValidos(parametros)){
			LoggerSemantico.getInstance().addError(StringErro.parametrosInvalidos(val.toString(), parametros, pa.lista));
			throw new ErroFatal();
		}
		if(Elemento.ehOperacaoColecao(val.valor)){
			val.parametro = pa.getFirstElemento();
		}
	}
	val.setAtributo("collection", "false");
	if(Elemento.ehOperacaoColecao(val.valor)){
		val.setAtributo("collection", "true");
	}
	val.setAtributo("tipo", tipo);
	Gerador.getInstance().desativarConsulta();
	RESULT = val;
	

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("propertyCall",25, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$6 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;

	if(Elemento.ehOperacaoColecao(p.toString())){
		Gerador.getInstance().setFuncaoConsulta();
	}

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifExp ::= IF oclExpression THEN oclExpression ELSE oclExpression ENDIF 
            {
              Object RESULT =null;
		int ifTokenleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)).left;
		int ifTokenright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)).right;
		Object ifToken = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		
	Elemento val = (Elemento) exp;
	Elemento val1 = (Elemento) exp1;
	Elemento val2 = (Elemento) exp2;
	
	Elemento res = new Elemento("Comando IF", ifTokenleft, ifTokenright);
	res.setAtributo("tipo", val1.getAtributo("tipo"));
	
	if(val.getAtributo("tipo") != "Boolean"){
		LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Boolean"));
	}
	if(!Elemento.tiposEquivalentes(val1.getAtributo("tipo"), val2.getAtributo("tipo"))){
		LoggerSemantico.getInstance().addError(StringErro.tipoDiferentes(val1.toString(), val2.toString(), val1.getAtributo("tipo"), val2.getAtributo("tipo")));
	}else{
		res.setAtributo("tipo", Elemento.max(val1.getAtributo("tipo"), val2.getAtributo("tipo")));
	}
	
	res.setAtributo("code", Gerador.getInstance().addIF(val.getAtributo("code"), val1.getAtributo("code"), val2.getAtributo("code"), Gerador.type(res.getAtributo("tipo"))));  
	
	RESULT = res;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("ifExp",12, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literalCollection ::= collectionTypeIdentifier LEFT_BRA expressionParameter RIGHT_BRA 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		
	Parametros p = (Parametros) exp;
	String tipo = p.tipoParametrosIguais();
	if(tipo == null){
		LoggerSemantico.getInstance().addError(StringErro.invalidoCollectionLiteral());
		throw new ErroFatal();
	}else{
		Elemento e = new Elemento(col.toString(), colleft, colright);
		e.setAtributo("tipo", e.valor + "(" + tipo + ")");
		RESULT = e;
	}

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("literalCollection",29, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primaryExpression ::= ifExp 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = exp; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primaryExpression ::= SELF 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	String tipo = XMIParserBasic.getInstancia().getAttributeType(id.toString());
	Elemento val = new Elemento(id.toString(), idleft, idright);
	if(tipo == null){
		LoggerSemantico.getInstance().addError(StringErro.naoExiste("Identificador", val.toString()));
		throw new ErroFatal();
	}
	
	val.setAtributo("tipo", tipo);
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primaryExpression ::= LEFT_PAR oclExpression RIGHT_PAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		
 	Elemento val = (Elemento) exp;
 	val.setAtributo("code", "(" + val.getAtributo("code") + ")");
	RESULT = val; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primaryExpression ::= propertyCall 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = p; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primaryExpression ::= literal 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = li; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primaryExpression ::= literalCollection 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = l; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operationCall ::= DOT 
            {
              Object RESULT =null;
		 RESULT = "."; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("operationCall",24, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operationCall ::= COLLECTIONOPERATION 
            {
              Object RESULT =null;
		 RESULT = "->"; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("operationCall",24, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // postfixExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("postfixExpressionAux",23, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // postfixExpressionAux ::= operationCall NT$4 propertyCall NT$5 postfixExpressionAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento pro = (Elemento) p; 
	if(op.toString() == "->"){
		if(pro.getAtributo("collection") != "true"){
			LoggerSemantico.getInstance().addError(StringErro.funcaoOperacaoInvalida(pro.toString()));
			throw new ErroFatal();
		}
	}
	if(op.toString() == "."){
		if(Elemento.ehOperacaoColecao(pro.valor)){
			LoggerSemantico.getInstance().addError(StringErro.atributoOperacaoInvalida(pro.toString()));
			throw new ErroFatal();
		}
		pro.setAtributo("code", "." + pro.getAtributo("code"));
	}
	if(aux != null){
		Elemento post = (Elemento) aux;
    	Elemento res = new Elemento(pro.valor, pleft, pright);
    	res.parametro = pro.parametro;
    	res.setAtributo("tipo", post.getAtributo("tipo"));
		if(post.getAtributo("collection") == "true"){
			if(!Elemento.ehCollection(pro.getAtributo("tipo"))){
				LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(pro.toString(), "Collection"));
				throw new ErroFatal();
			}
		}
		if(post.valor.equalsIgnoreCase("any") || post.valor.equalsIgnoreCase("forAll") || post.valor.equalsIgnoreCase("exists") || post.getAtributo("especial") != null){
			res.setAtributo("especial", "true");
		} else if(post.getAtributo("operacao") == "."){
			if(post.getAtributo("especial") != null){
				res.setAtributo("especial", "true");
			}else if(Elemento.ehCollection(pro.getAtributo("tipo")) && !Elemento.ehCollection(res.getAtributo("tipo"))){
				res.setAtributo("tipo", "Collection(" + res.getAtributo("tipo") + ")");
			}
		}
		res.setAtributo("operacao",op.toString());
		if(op.toString() == "->"){
			res.setAtributo("code", post.getAtributo("code"));
		}else if(post.getAtributo("operacao") == "->"){
			res.setAtributo("code", Gerador.getInstance().addFuncaoCONSULTA(post.valor, post.parametro, pro) + post.getAtributo("code"));
		}else{
			res.setAtributo("code", pro.getAtributo("code") + post.getAtributo("code"));
		}
		RESULT = res;
	}else{
		if(pro.valor.equalsIgnoreCase("any") || pro.valor.equalsIgnoreCase("forAll") || pro.valor.equalsIgnoreCase("exists")){
			pro.setAtributo("especial", "true");
		}
		pro.setAtributo("operacao",op.toString());
		RESULT = pro;
	}
	if(Elemento.ehCollection(pro.getAtributo("tipo"))){
		XMIParserBasic.getInstancia().desativarNavegando(Elemento.tipoCollection(pro.getAtributo("tipo")));
	}else{
		XMIParserBasic.getInstancia().desativarNavegando(pro.getAtributo("tipo"));
	}

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("postfixExpressionAux",23, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;

	Elemento val = (Elemento) p;
	String tipo = val.getAtributo("tipo");
	if(Elemento.ehCollection(tipo)){
		tipo = Elemento.tipoCollection(tipo);
	}
	XMIParserBasic.getInstancia().setTempContext(tipo);

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$4 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;

	XMIParserBasic.getInstancia().ativarNavegando();

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // postfixExpression ::= primaryExpression NT$3 postfixExpressionAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int prileft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object pri = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
    Elemento source = (Elemento) pri;
    if(aux != null){
    	Elemento post = (Elemento) aux;
    	Elemento res = new Elemento(source.valor, prileft, priright);
    	res.setAtributo("tipo", post.getAtributo("tipo"));
		if(post.getAtributo("collection") == "true"){
			if(!Elemento.ehCollection(source.getAtributo("tipo"))){
				LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(source.toString(), "Collection"));
				throw new ErroFatal();
			}
		}
		if(post.valor.equalsIgnoreCase("any") || post.valor.equalsIgnoreCase("forAll") || post.valor.equalsIgnoreCase("exists")){
			res.setAtributo("especial", "true");
		} else if(post.getAtributo("operacao") == "."){
			if(post.getAtributo("especial") != null){
				res.setAtributo("especial", "true");
			}else if(Elemento.ehCollection(source.getAtributo("tipo")) && !Elemento.ehCollection(res.getAtributo("tipo"))){
				res.setAtributo("tipo", "Collection(" + res.getAtributo("tipo") + ")");
			}
		}
		if(post.getAtributo("operacao") == "->"){
			if(post.getAtributo("code") == null)
				res.setAtributo("code", Gerador.getInstance().addFuncaoCONSULTA(post.valor, post.parametro, source));
			else
				res.setAtributo("code", Gerador.getInstance().addFuncaoCONSULTA(post.valor, post.parametro, source) + post.getAtributo("code"));
		}else{
			res.setAtributo("code", source.getAtributo("code") + post.getAtributo("code"));
		}
		RESULT = res;
	}else{
		RESULT = pri;
	}
	if(Elemento.ehCollection(source.getAtributo("tipo"))){
		XMIParserBasic.getInstancia().desativarNavegando(Elemento.tipoCollection(source.getAtributo("tipo")));
	}else{
		XMIParserBasic.getInstancia().desativarNavegando(source.getAtributo("tipo"));
	}

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("postfixExpression",22, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$3 ::= 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int priright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object pri = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;

	Elemento val = (Elemento) pri;
	String tipo = val.getAtributo("tipo");
	if(Elemento.ehCollection(tipo)){
		tipo = Elemento.tipoCollection(tipo);
	}
	XMIParserBasic.getInstancia().setTempContext(tipo);

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unaryExpression ::= postfixExpression 
            {
              Object RESULT =null;
		int postleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int postright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object post = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = post; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("unaryExpression",34, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unaryExpression ::= unaryOperator postfixExpression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int postright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object post = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) post;
	Elemento oper = (Elemento) op;
	
	if(op.toString() == "NOT"){
		if(val.getAtributo("tipo") != "Boolean"){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Boolean"));
		}
	}else if(op.toString() == "-"){
		if((val.getAtributo("tipo") != "Real") && (val.getAtributo("tipo") != "Integer") ){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
		}
	}
	
	val.valor = oper.toString() + " " + val.valor;
	val.setAtributo("code", oper.getAtributo("code") + val.getAtributo("code"));  
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("unaryExpression",34, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // multiplicativeExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("multiplicativeExpressionAux",21, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // multiplicativeExpressionAux ::= multiplyOperator unaryExpression multiplicativeExpressionAux 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int unleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) un;
	Elemento oper = (Elemento) op;
	val.setAtributo("code", val.getAtributo("code"));
	val.setAtributo("operacaoCode", oper.getAtributo("code"));
	
	if((val.getAtributo("tipo") != "Real") && (val.getAtributo("tipo") != "Integer") ){
		LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
	}
	if(aux != null){
		Elemento auxElem = (Elemento) aux;
		val.setAtributo("code", TemplateCode.ARITIMETICEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"),auxElem.getAtributo("code")));
	}
	
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("multiplicativeExpressionAux",21, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // multiplicativeExpression ::= unaryExpression multiplicativeExpressionAux 
            {
              Object RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object un = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) un;
	if(aux != null){ 
		if((val.getAtributo("tipo") != "Real") && (val.getAtributo("tipo") != "Integer") ){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
		}
		Elemento auxElem = (Elemento) aux;
		val.setAtributo("code", TemplateCode.ARITIMETICEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"),auxElem.getAtributo("code")));
	}
	RESULT = un;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",20, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // additiveExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("additiveExpressionAux",19, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // additiveExpressionAux ::= addOperator multiplicativeExpression additiveExpressionAux 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) mult;
	Elemento oper = (Elemento) op;
	val.setAtributo("code", val.getAtributo("code"));
	val.setAtributo("operacaoCode", oper.getAtributo("code"));
	
	if((val.getAtributo("tipo") != "Real") && (val.getAtributo("tipo") != "Integer") ){
		LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
	}
	
	if(aux != null){
		Elemento auxElem = (Elemento) aux;
		val.setAtributo("code", TemplateCode.ARITIMETICEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"),auxElem.getAtributo("code")));
	}
	
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("additiveExpressionAux",19, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // additiveExpression ::= multiplicativeExpression additiveExpressionAux 
            {
              Object RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) mult;
	if(aux != null){ 
		if((val.getAtributo("tipo") != "Real") && (val.getAtributo("tipo") != "Integer") ){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
		}
		Elemento auxElem = (Elemento) aux;
		val.setAtributo("code", TemplateCode.ARITIMETICEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"),auxElem.getAtributo("code")));
	}
	RESULT = mult;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("additiveExpression",18, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relationalExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalExpressionAux",17, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relationalExpressionAux ::= relationalOperator additiveExpression relationalExpressionAux 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int addright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object add = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) add;
	Elemento oper = (Elemento) op;
	val.setAtributo("code", val.getAtributo("code"));
	val.setAtributo("operacao", oper.toString());
	val.setAtributo("operacaoCode", oper.getAtributo("code"));
	if((val.getAtributo("operacao") != "=") && (val.getAtributo("operacao") != "<>")){
		if((val.getAtributo("tipo") != "Real") && (val.getAtributo("tipo") != "Integer") ){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
		}
	}
	if(aux != null){
		Elemento auxElem = (Elemento) aux;
		if((auxElem.getAtributo("operacao") == "=") || (auxElem.getAtributo("operacao") == "<>")){
			if(!Elemento.tiposEquivalentes(val.getAtributo("tipo"), auxElem.getAtributo("tipo"))){
				LoggerSemantico.getInstance().addError(StringErro.tipoDiferentes(val.toString(), auxElem.toString(), val.getAtributo("tipo"), auxElem.getAtributo("tipo")));
			}
		}
		auxElem.coercao(val.getAtributo("tipo"));
		val.setAtributo("tipo", "Boolean");
		val.setAtributo("code", TemplateCode.RELATIONALEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"),auxElem.getAtributo("code")));
	}
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalExpressionAux",17, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relationalExpression ::= additiveExpression relationalExpressionAux 
            {
              Object RESULT =null;
		int addleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int addright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object add = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) add;
	if(aux != null){
		Elemento auxElem = (Elemento) aux; 
		if((auxElem.getAtributo("operacao") != "=") && (auxElem.getAtributo("operacao") != "<>")){
			if((!val.getAtributo("tipo").equalsIgnoreCase("Real")) && (!val.getAtributo("tipo").equalsIgnoreCase("Integer"))){
				LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Integer ou Real"));
			}
		}else{
			if(!Elemento.tiposEquivalentes(val.getAtributo("tipo"), auxElem.getAtributo("tipo"))){
				LoggerSemantico.getInstance().addError(StringErro.tipoDiferentes(val.toString(), auxElem.toString(), val.getAtributo("tipo"), auxElem.getAtributo("tipo")));
			}
		}
		val.setAtributo("tipo", "Boolean");
		val.setAtributo("code", TemplateCode.RELATIONALEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"), auxElem.getAtributo("code")));
	}
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("relationalExpression",16, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // oclExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("oclExpressionAux",35, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // oclExpressionAux ::= logicalOperator relationalExpression oclExpressionAux 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento val = (Elemento) r;
	Elemento oper = (Elemento) op;
	
	val.setAtributo("operacao", oper.toString());
	val.setAtributo("operacaoCode", oper.getAtributo("code"));
	  
	if(val.getAtributo("tipo") != "Boolean"){
		LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Boolean"));
	}
	
	if(aux != null){
		Elemento auxElem = (Elemento) aux;
		if(auxElem.getAtributo("operacao").equalsIgnoreCase("IMPLIES")){
			val.setAtributo("code", Gerador.getInstance().addIMPLIES(val.getAtributo("code"), auxElem.getAtributo("code")));		
		}else{
			val.setAtributo("code", TemplateCode.RELATIONALEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"), auxElem.getAtributo("code")));
		}
	}
	
	RESULT = val; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("oclExpressionAux",35, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // oclExpression ::= relationalExpression oclExpressionAux 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	
	Elemento val = (Elemento) r;
	
	if(aux != null){
		if(val.getAtributo("tipo") != "Boolean"){
			LoggerSemantico.getInstance().addError(StringErro.tipoInvalido(val.toString(), "Boolean"));
		}
		
		Elemento auxElem = (Elemento) aux;
		if(auxElem.getAtributo("operacao").equalsIgnoreCase("IMPLIES")){
			val.setAtributo("code", Gerador.getInstance().addIMPLIES(val.getAtributo("code"), auxElem.getAtributo("code")));		
		}else{
			val.setAtributo("code", TemplateCode.RELATIONALEXPRESSION(val.getAtributo("code"), auxElem.getAtributo("operacaoCode"), auxElem.getAtributo("code")));
		}
	}
	RESULT = val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("oclExpression",6, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variableDeclaration ::= IDENTIFIER COLON typeName 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	XMIParserBasic.getInstancia().addVariavel(id.toString(),type.toString());
	Elemento r = new Elemento(id.toString(), idleft, idright);
	r.setAtributo("code", id.toString() + " " + type.toString());
	r.setAtributo("string", id.toString() + ":" + type.toString());
	RESULT = r;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("variableDeclaration",15, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literal ::= STRING 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento elem = new Elemento(v.toString(), vleft, vright);
	elem.setAtributo("tipo", "String");
	elem.setAtributo("code", v.toString());
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literal ::= BOOLEAN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento elem = new Elemento(v.toString(), vleft, vright);
	elem.setAtributo("tipo", "Boolean");
	elem.setAtributo("code", v.toString());
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal ::= INTEGER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento elem = new Elemento(v.toString(), vleft, vright);
	elem.setAtributo("tipo", "Integer");
	elem.setAtributo("code", v.toString());
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= REAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento elem = new Elemento(v.toString(), vleft, vright);
	elem.setAtributo("tipo", "Real");
	elem.setAtributo("code", v.toString());
	RESULT = elem;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primaryTypes ::= INTEGERTYPE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 
	Elemento r = new Elemento("Integer");
	r.setAtributo("code", "int");
	RESULT = r; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primaryTypes ::= BOOLEANTYPE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 
	Elemento r = new Elemento("Boolean");
	r.setAtributo("code", "bool");
	RESULT = r; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primaryTypes ::= REALTYPE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento re = new Elemento("Real");
	re.setAtributo("code", "float");
	RESULT = r; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primaryTypes ::= STRINGTYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento r = new Elemento("String");
	r.setAtributo("code", "string");
	RESULT = r; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typeName ::= collectionType 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = c; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("typeName",14, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typeName ::= pathName 
            {
              Object RESULT =null;
		int pnaleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pnaright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object pna = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = pna.toString(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("typeName",14, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typeName ::= primaryTypes 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = p; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("typeName",14, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // collectionTypeIdentifier ::= COLLECTION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("collectionTypeIdentifier",11, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // collectionType ::= collectionTypeIdentifier LEFT_PAR typeName RIGHT_PAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		
	Elemento r = new Elemento(c.toString() + "(" + t.toString() + ")");
	r.setAtributo("code", c.toString() + "(" + t.toString() + ")");
	RESULT = r;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("collectionType",13, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters ::= variableDeclaration COMMA parameters 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	LinkedList<Parametro> pa = (LinkedList<Parametro>) p;
	
	Elemento vElem = (Elemento) v;
	String str[] = vElem.getAtributo("string").split(":");
	
	Parametro par = new Parametro(str[0], str[1]);
	
	pa.add(par);
	 
	RESULT = pa; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= variableDeclaration 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	Elemento vElem = (Elemento) v;
	String str[] = vElem.getAtributo("string").split(":");
	
	LinkedList<Parametro> pa = new LinkedList<Parametro>();
	Parametro p = new Parametro(str[0], str[1]);
	
	pa.add(p);
	
	RESULT = pa; 

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operationParAux ::= 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<Parametro>(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("operationParAux",5, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operationParAux ::= parameters 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = p; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("operationParAux",5, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operation ::= IDENTIFIER pathNameOperation LEFT_PAR operationParAux RIGHT_PAR COLON typeName 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)).value;
		int pnoleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).left;
		int pnoright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).right;
		Object pno = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-5)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		
	
	LinkedList<Parametro> opeParametros = (LinkedList<Parametro>) ope;
	Elemento typeElem = (Elemento) type;
	
	Elemento val = new Elemento(id.toString() + pno.toString(), idleft, idright);
	String[] splited = pno.toString().split("::");
	val.setAtributo("operacao", splited[splited.length - 1]);
	Gerador.getInstance().addFuncao(id.toString(), splited[splited.length - 1], opeParametros, typeElem.getAtributo("code"));
	val.setAtributo("string", id.toString() + pno.toString() + "(" + Elemento.parametrosToString(opeParametros) + ")" + ":" + typeElem.toString());
	
	RESULT =  val;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("operation",4, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bodyDeclaration ::= BODY COLON oclExpression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 
	RESULT = exp;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("bodyDeclaration",3, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contextDeclaration ::= CONTEXT operation NT$2 bodyDeclaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 
	Elemento val = (Elemento) op;
	val.setAtributo("tipo", XMIParserBasic.getInstancia().getOperationType(val.getAtributo("operacao")));	
	Elemento body = (Elemento) b;
	
	if(!Elemento.tiposEquivalentes(val.getAtributo("tipo"), body.getAtributo("tipo"))){
		LoggerSemantico.getInstance().addError(StringErro.tipoConsultaInvalida(body.toString(), val.getAtributo("tipo"), body.getAtributo("tipo")));
	}
	
	val.setAtributo("tipo", Elemento.max(val.getAtributo("tipo"), body.getAtributo("tipo")));
	RESULT = val;
	XMIParserBasic.getInstancia().deleteAllVariaveis();
	Gerador.getInstance().gen(body.getAtributo("code"));

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;

	Elemento val = (Elemento) op;
	XMIParserBasic.getInstancia().setContext(val.getAtributo("string"));
	if(!XMIParserBasic.getInstancia().existsContext()){
		LoggerSemantico.getInstance().addError(StringErro.contextoInvalido(val.toString()));
		throw new ErroFatal();
	}
	Gerador.getInstance().setFuncao(val.getAtributo("operacao"));

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pathNameOperation ::= PATHNAME pathName 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object path = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = "::"+ path.toString(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("pathNameOperation",10, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pathNameAux ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("pathNameAux",9, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pathNameAux ::= PATHNAME pathName 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object path = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = "::" + path.toString(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("pathNameAux",9, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pathName ::= IDENTIFIER pathNameAux 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object aux = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;
		 RESULT = id.toString() + aux.toString(); 
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("pathName",8, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // packageDeclarationAux ::= 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("packageDeclarationAux",1, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // packageDeclarationAux ::= contextDeclaration packageDeclarationAux 
            {
              Object RESULT =null;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("packageDeclarationAux",1, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // packageDeclaration ::= NT$1 packageDeclarationAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;

	XMIParserBasic.getInstancia().setPackage("");

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // packageDeclaration ::= PACKAGE pathName NT$0 packageDeclarationAux ENDPACKAGE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-2)).value;
		int pnleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-3)).value;

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()).right;
		Object pn = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.peek()).value;

	XMIParserBasic.getInstancia().setPackage(pn.toString());
	if(!XMIParserBasic.getInstancia().existsPackage()){
		LoggerSemantico.getInstance().addError(StringErro.packageInvalido(pn.toString()));
		throw new ErroFatal();
	}

              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          return CUP$GeracaoCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= packageDeclaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)).value;
		RESULT = start_val;
              CUP$GeracaoCodigo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.elementAt(CUP$GeracaoCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$GeracaoCodigo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeracaoCodigo$parser.done_parsing();
          return CUP$GeracaoCodigo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

