
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 05 23:17:39 GMT-03:00 2011
//----------------------------------------------------

package analise_sintatica;

import java_cup.runtime.Symbol;
import util.sym;
import util.Util;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 05 23:17:39 GMT-03:00 2011
  */
public class AnaliseSintatica extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnaliseSintatica() {super();}

  /** Constructor which sets the default scanner. */
  public AnaliseSintatica(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnaliseSintatica(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\012\004" +
    "\000\002\013\004\000\002\013\002\000\002\014\004\000" +
    "\002\004\005\000\002\005\005\000\002\006\011\000\002" +
    "\007\003\000\002\007\002\000\002\011\003\000\002\011" +
    "\005\000\002\017\006\000\002\015\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\021\005\000\002\010\004\000\002\045\005" +
    "\000\002\045\002\000\002\022\004\000\002\023\005\000" +
    "\002\023\002\000\002\024\004\000\002\025\005\000\002" +
    "\025\002\000\002\026\004\000\002\027\005\000\002\027" +
    "\002\000\002\044\004\000\002\044\003\000\002\030\004" +
    "\000\002\031\005\000\002\031\002\000\002\032\003\000" +
    "\002\032\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\005\000\002\043\003\000\002\043" +
    "\003\000\002\037\006\000\002\016\011\000\002\033\005" +
    "\000\002\042\005\000\002\042\002\000\002\034\005\000" +
    "\002\034\006\000\002\034\002\000\002\035\007\000\002" +
    "\036\005\000\002\036\002\000\002\055\004\000\002\055" +
    "\002\000\002\040\004\000\002\040\004\000\002\040\002" +
    "\000\002\041\005\000\002\041\005\000\002\041\002\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\050\003\000\002\050\003\000\002\047\003\000" +
    "\002\047\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\010\002\ufffd\004\006\006\010\001\002\000" +
    "\010\002\ufffd\005\ufffd\006\010\001\002\000\004\002\225" +
    "\001\002\000\004\060\036\001\002\000\004\002\uffff\001" +
    "\002\000\004\060\012\001\002\000\004\007\052\001\002" +
    "\000\004\015\013\001\002\000\004\060\036\001\002\000" +
    "\004\016\015\001\002\000\006\021\ufff4\060\017\001\002" +
    "\000\004\021\ufff5\001\002\000\004\014\047\001\002\000" +
    "\004\021\024\001\002\000\006\013\022\021\ufff3\001\002" +
    "\000\004\060\017\001\002\000\004\021\ufff2\001\002\000" +
    "\004\014\025\001\002\000\016\010\034\051\026\052\031" +
    "\053\037\054\033\060\036\001\002\000\010\007\uffe9\013" +
    "\uffe9\021\uffe9\001\002\000\004\016\044\001\002\000\010" +
    "\007\uffee\013\uffee\021\uffee\001\002\000\010\007\uffeb\013" +
    "\uffeb\021\uffeb\001\002\000\010\007\uffef\013\uffef\021\uffef" +
    "\001\002\000\010\007\uffec\013\uffec\021\uffec\001\002\000" +
    "\006\016\ufff0\020\ufff0\001\002\000\004\007\ufff6\001\002" +
    "\000\122\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\015\042\016\ufffa\017\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\001\002\000\010\007\uffea\013\uffea\021" +
    "\uffea\001\002\000\010\007\uffed\013\uffed\021\uffed\001\002" +
    "\000\120\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\001\002\000\004\060\036\001\002\000\120\002" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\001" +
    "\002\000\016\010\034\051\026\052\031\053\037\054\033" +
    "\060\036\001\002\000\004\021\046\001\002\000\010\007" +
    "\ufff1\013\ufff1\021\ufff1\001\002\000\016\010\034\051\026" +
    "\052\031\053\037\054\033\060\036\001\002\000\006\013" +
    "\uffe4\021\uffe4\001\002\000\004\016\ufff9\001\002\000\004" +
    "\014\054\001\002\000\010\002\ufff8\005\ufff8\006\ufff8\001" +
    "\002\000\030\010\034\011\102\016\071\036\057\041\061" +
    "\046\074\055\077\056\101\057\070\060\036\061\067\001" +
    "\002\000\106\002\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\016\uffd6\021\uffd6\022\uffd6\023\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\001\002\000\112\002\uffd3\005" +
    "\uffd3\006\uffd3\010\uffd3\011\uffd3\012\217\013\uffd3\016\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\025\215\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\001\002\000\024\010\uffa8\011\uffa8\016" +
    "\uffa8\041\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\001\002\000\004\020\211\001\002\000\030\010\034\011" +
    "\102\016\071\036\057\041\061\046\074\055\077\056\101" +
    "\057\070\060\036\061\067\001\002\000\100\002\uffde\005" +
    "\uffde\006\uffde\010\uffde\011\uffde\013\uffde\016\uffde\021\uffde" +
    "\022\uffde\023\uffde\026\171\027\177\030\174\031\175\032" +
    "\173\033\172\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\001\002\000\106\002\uffd8" +
    "\005\uffd8\006\uffd8\010\uffd8\011\uffd8\013\uffd8\016\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\166\050\165\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\001\002\000\112\002\uffce\005\uffce\006\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\016\uffce\021\uffce\022\uffce\023" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\001" +
    "\002\000\102\002\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb" +
    "\013\uffdb\016\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\156\046\157\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\001\002\000\064\002\uffe1\005\uffe1\006\uffe1\010" +
    "\uffe1\011\uffe1\013\uffe1\016\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\034\147\035\151\036\uffe1\037\152\040\146\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\046\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\001\002\000\112\002\uffe6\005\uffe6\006" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\016\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\001\002\000\112\002\uffe5\005\uffe5\006\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\016\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\001\002\000\030\010\034\011\102\016\071\036\057\041" +
    "\061\046\074\055\077\056\101\057\070\060\036\061\067" +
    "\001\002\000\024\010\034\011\102\016\071\041\061\055" +
    "\077\056\101\057\070\060\036\061\067\001\002\000\112" +
    "\002\uffcb\005\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\016\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\024\010\uffa9" +
    "\011\uffa9\016\uffa9\041\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\001\002\000\112\002\uffcf\005\uffcf\006\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\016\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\001\002\000\114\002\uffc6\005\uffc6\006\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\016\uffc6\017\105\021\uffc6\022" +
    "\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\001\002\000\112\002\uffe7\005\uffe7\006\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\016\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\001" +
    "\002\000\112\002\uffd0\005\uffd0\006\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\016\uffd0\021\uffd0\022\uffd0\023\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\001\002\000" +
    "\112\002\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\016\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\001\002\000\112\002" +
    "\uffcc\005\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\016\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\001\002\000\010\002\ufff7\005" +
    "\ufff7\006\ufff7\001\002\000\112\002\uffc3\005\uffc3\006\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\016\121\021\uffc3\022" +
    "\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\001\002\000\032\010\034\011\102\016\071\022\uffbb" +
    "\036\057\041\061\046\074\055\077\056\101\057\070\060" +
    "\107\061\067\001\002\000\004\022\120\001\002\000\060" +
    "\012\ufffa\013\111\015\042\016\ufffa\017\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\001\002\000\012\013\111" +
    "\021\uffb8\022\uffb8\023\uffb8\001\002\000\030\010\034\011" +
    "\102\016\071\036\057\041\061\046\074\055\077\056\101" +
    "\057\070\060\113\061\067\001\002\000\010\021\uffbd\022" +
    "\uffbd\023\uffbd\001\002\000\060\012\ufffa\013\111\015\042" +
    "\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\037\ufffa\040\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\001\002\000\012\013\111\021\uffb8\022\uffb8\023\uffb8" +
    "\001\002\000\010\021\uffba\022\uffba\023\uffba\001\002\000" +
    "\010\021\uffb9\022\uffb9\023\uffb9\001\002\000\010\021\uffbc" +
    "\022\uffbc\023\uffbc\001\002\000\112\002\uffc7\005\uffc7\006" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\016\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\001\002\000\032\010\034\011\102\016\071\021" +
    "\uffbb\036\057\041\061\046\074\055\077\056\101\057\070" +
    "\060\124\061\067\001\002\000\112\002\uffc8\005\uffc8\006" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\016\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\001\002\000\004\021\141\001\002\000\060\012" +
    "\ufffa\013\130\014\uffc0\015\042\016\ufffa\017\ufffa\021\ufffa" +
    "\024\uffc0\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\001\002\000\032\010\034\011" +
    "\102\016\071\021\uffbb\036\057\041\061\046\074\055\077" +
    "\056\101\057\070\060\107\061\067\001\002\000\004\021" +
    "\127\001\002\000\112\002\uffc4\005\uffc4\006\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\016\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\001" +
    "\002\000\030\010\034\011\102\016\071\036\057\041\061" +
    "\046\074\055\077\056\101\057\070\060\137\061\067\001" +
    "\002\000\006\014\132\024\uffbe\001\002\000\004\060\036" +
    "\001\002\000\004\024\134\001\002\000\030\010\034\011" +
    "\102\016\071\036\057\041\061\046\074\055\077\056\101" +
    "\057\070\060\036\061\067\001\002\000\032\010\uffc2\011" +
    "\uffc2\016\uffc2\021\uffc2\036\uffc2\041\uffc2\046\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\004\024" +
    "\uffbf\001\002\000\060\012\ufffa\013\130\014\uffc0\015\042" +
    "\016\ufffa\017\ufffa\021\ufffa\024\uffc0\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\037\ufffa\040\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\001" +
    "\002\000\006\014\uffc1\024\uffc1\001\002\000\112\002\uffc5" +
    "\005\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\016" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\001\002\000\106\002\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\011\uffd7\013\uffd7\016\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\004\021\144\001\002\000\112\002\uffcd\005\uffcd" +
    "\006\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\030\010\034\011\102\016\071" +
    "\036\057\041\061\046\074\055\077\056\101\057\070\060" +
    "\036\061\067\001\002\000\030\010\uffb4\011\uffb4\016\uffb4" +
    "\036\uffb4\041\uffb4\046\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\001\002\000\030\010\uffb7\011\uffb7\016\uffb7" +
    "\036\uffb7\041\uffb7\046\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\001\002\000\054\002\uffe3\005\uffe3\006\uffe3" +
    "\010\uffe3\011\uffe3\013\uffe3\016\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\036\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\046\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\001\002\000" +
    "\030\010\uffb6\011\uffb6\016\uffb6\036\uffb6\041\uffb6\046\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000" +
    "\030\010\uffb5\011\uffb5\016\uffb5\036\uffb5\041\uffb5\046\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000" +
    "\064\002\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\013\uffe1" +
    "\016\uffe1\021\uffe1\022\uffe1\023\uffe1\034\147\035\151\036" +
    "\uffe1\037\152\040\146\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\046\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\001" +
    "\002\000\054\002\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\016\uffe2\021\uffe2\022\uffe2\023\uffe2\036\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\001\002\000\100\002\uffdd\005" +
    "\uffdd\006\uffdd\010\uffdd\011\uffdd\013\uffdd\016\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\001\002\000\030\010\uffad" +
    "\011\uffad\016\uffad\036\uffad\041\uffad\046\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\001\002\000\030\010\uffac" +
    "\011\uffac\016\uffac\036\uffac\041\uffac\046\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\001\002\000\030\010\034" +
    "\011\102\016\071\036\057\041\061\046\074\055\077\056" +
    "\101\057\070\060\036\061\067\001\002\000\102\002\uffdb" +
    "\005\uffdb\006\uffdb\010\uffdb\011\uffdb\013\uffdb\016\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\156\046\157" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000" +
    "\100\002\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc" +
    "\016\uffdc\021\uffdc\022\uffdc\023\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002" +
    "\000\102\002\uffda\005\uffda\006\uffda\010\uffda\011\uffda\013" +
    "\uffda\016\uffda\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\001\002\000\030\010\034\011\102\016\071\036\057" +
    "\041\061\046\074\055\077\056\101\057\070\060\036\061" +
    "\067\001\002\000\030\010\uffaa\011\uffaa\016\uffaa\036\uffaa" +
    "\041\uffaa\046\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\001\002\000\030\010\uffab\011\uffab\016\uffab\036\uffab" +
    "\041\uffab\046\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\001\002\000\106\002\uffd8\005\uffd8\006\uffd8\010\uffd8" +
    "\011\uffd8\013\uffd8\016\uffd8\021\uffd8\022\uffd8\023\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\166\050\165\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000\102\002" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\013\uffd9\016\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\001\002" +
    "\000\030\010\uffb3\011\uffb3\016\uffb3\036\uffb3\041\uffb3\046" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002" +
    "\000\030\010\uffae\011\uffae\016\uffae\036\uffae\041\uffae\046" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\001\002" +
    "\000\030\010\uffaf\011\uffaf\016\uffaf\036\uffaf\041\uffaf\046" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002" +
    "\000\030\010\uffb1\011\uffb1\016\uffb1\036\uffb1\041\uffb1\046" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002" +
    "\000\030\010\uffb0\011\uffb0\016\uffb0\036\uffb0\041\uffb0\046" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002" +
    "\000\064\002\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\016\uffe0\021\uffe0\022\uffe0\023\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\046\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\001\002\000\030\010\uffb2\011\uffb2\016\uffb2\036\uffb2\041" +
    "\uffb2\046\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\001\002\000\030\010\034\011\102\016\071\036\057\041" +
    "\061\046\074\055\077\056\101\057\070\060\036\061\067" +
    "\001\002\000\100\002\uffde\005\uffde\006\uffde\010\uffde\011" +
    "\uffde\013\uffde\016\uffde\021\uffde\022\uffde\023\uffde\026\171" +
    "\027\177\030\174\031\175\032\173\033\172\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\046\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\001\002\000\064\002\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\016\uffdf\021\uffdf\022\uffdf\023\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\046\uffdf\055\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\001\002\000\004\043\204\001\002\000\030" +
    "\010\034\011\102\016\071\036\057\041\061\046\074\055" +
    "\077\056\101\057\070\060\036\061\067\001\002\000\004" +
    "\042\206\001\002\000\030\010\034\011\102\016\071\036" +
    "\057\041\061\046\074\055\077\056\101\057\070\060\036" +
    "\061\067\001\002\000\004\044\210\001\002\000\112\002" +
    "\uffc9\005\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\016\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\001\002\000\032\010\034\011" +
    "\102\016\071\023\uffbb\036\057\041\061\046\074\055\077" +
    "\056\101\057\070\060\107\061\067\001\002\000\004\023" +
    "\213\001\002\000\112\002\uffca\005\uffca\006\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\016\uffca\021\uffca\022\uffca\023" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001" +
    "\002\000\004\060\036\001\002\000\004\060\uffd2\001\002" +
    "\000\106\002\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5\013" +
    "\uffd5\016\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\001\002\000\004\060\uffd1\001\002" +
    "\000\112\002\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012" +
    "\217\013\uffd3\016\uffd3\021\uffd3\022\uffd3\023\uffd3\025\215" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002\000\106" +
    "\002\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4\013\uffd4\016" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\001\002\000\006\005\ufffd\006\010\001\002" +
    "\000\004\005\224\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002\000\006\002\ufffe\005\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\010\002\004\003\006\004\003\001\001\000" +
    "\006\003\225\004\003\001\001\000\002\001\001\000\004" +
    "\012\221\001\001\000\002\001\001\000\004\006\010\001" +
    "\001\000\004\005\052\001\001\000\004\014\013\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\010\007" +
    "\017\011\015\021\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\022\021\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\027\015\026\017\037\020\034\054\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\042\001\001\000\002\001\001\000\014\012\027" +
    "\015\026\017\037\020\044\054\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\027\015\026\017\037" +
    "\020\047\054\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\102" +
    "\012\075\015\057\016\072\022\065\024\061\026\064\030" +
    "\054\033\063\037\077\043\055\044\062\046\071\053\074" +
    "\001\001\000\002\001\001\000\006\031\215\032\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\202" +
    "\012\075\015\057\016\072\022\065\024\061\026\064\030" +
    "\054\033\063\037\077\043\055\044\062\046\071\053\074" +
    "\001\001\000\006\023\175\051\177\001\001\000\006\027" +
    "\162\047\163\001\001\000\002\001\001\000\006\025\154" +
    "\050\157\001\001\000\006\045\147\052\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\010\142\012\075" +
    "\015\057\016\072\022\065\024\061\026\064\030\054\033" +
    "\063\037\077\043\055\044\062\046\071\053\074\001\001" +
    "\000\022\012\075\015\057\016\072\030\141\033\063\037" +
    "\077\043\055\053\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\121\001\001\000" +
    "\040\010\107\012\075\015\057\016\072\022\065\024\061" +
    "\026\064\030\054\033\063\037\077\040\105\043\055\044" +
    "\062\046\071\053\074\001\001\000\002\001\001\000\006" +
    "\013\040\041\116\001\001\000\004\041\111\001\001\000" +
    "\036\010\113\012\075\015\057\016\072\022\065\024\061" +
    "\026\064\030\054\033\063\037\077\043\055\044\062\046" +
    "\071\053\074\001\001\000\002\001\001\000\006\013\040" +
    "\041\115\001\001\000\004\041\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\010\107\012\075\015\057\016\072\022\065\024" +
    "\061\026\064\030\054\033\063\035\124\037\077\040\122" +
    "\043\055\044\062\046\071\053\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\040\036\130\041\116" +
    "\001\001\000\040\010\107\012\075\015\057\016\072\022" +
    "\065\024\061\026\064\030\054\033\063\037\077\040\125" +
    "\043\055\044\062\046\071\053\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\010\113\012\075\015\057" +
    "\016\072\022\065\024\061\026\064\030\054\033\063\037" +
    "\077\043\055\044\062\046\071\053\074\001\001\000\004" +
    "\055\132\001\001\000\004\012\135\001\001\000\002\001" +
    "\001\000\036\010\134\012\075\015\057\016\072\022\065" +
    "\024\061\026\064\030\054\033\063\037\077\043\055\044" +
    "\062\046\071\053\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\040\036\137\041\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\075\015\057\016" +
    "\072\022\152\024\061\026\064\030\054\033\063\037\077" +
    "\043\055\044\062\046\071\053\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\153\052\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\075\015\057\016\072\026\160\030" +
    "\054\033\063\037\077\043\055\044\062\046\071\053\074" +
    "\001\001\000\006\025\161\050\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\075\015\057\016\072" +
    "\030\054\033\063\037\077\043\055\044\166\046\071\053" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\167\047\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\012\075\015\057\016\072\024\200\026\064\030\054" +
    "\033\063\037\077\043\055\044\062\046\071\053\074\001" +
    "\001\000\006\023\201\051\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\010\204\012\075\015\057\016" +
    "\072\022\065\024\061\026\064\030\054\033\063\037\077" +
    "\043\055\044\062\046\071\053\074\001\001\000\002\001" +
    "\001\000\036\010\206\012\075\015\057\016\072\022\065" +
    "\024\061\026\064\030\054\033\063\037\077\043\055\044" +
    "\062\046\071\053\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\107\012\075\015\057\016\072\022" +
    "\065\024\061\026\064\030\054\033\063\037\077\040\211" +
    "\043\055\044\062\046\071\053\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\075\033\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\220\032\213\001\001\000\002\001\001\000\006" +
    "\003\222\004\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnaliseSintatica$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnaliseSintatica$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnaliseSintatica$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public void report_error(String message, Object info) {
		Util.report_error(message, info);
	}
	public void syntax_error(Symbol cur_token) {
		Util.syntax_error(cur_token);
	}
	public void debug_message(String mess) {
		Util.debug_message(mess);
	}
	public void debug_shift(Symbol shift_tkn) {
		Util.debug_shift(shift_tkn);
	}
	public void debug_reduce(int prod_num, int nt_num, int rhs_size) {
		Util.debug_reduce(prod_num, nt_num, rhs_size);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnaliseSintatica$actions {
  private final AnaliseSintatica parser;

  /** Constructor */
  CUP$AnaliseSintatica$actions(AnaliseSintatica parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnaliseSintatica$do_action(
    int                        CUP$AnaliseSintatica$act_num,
    java_cup.runtime.lr_parser CUP$AnaliseSintatica$parser,
    java.util.Stack            CUP$AnaliseSintatica$stack,
    int                        CUP$AnaliseSintatica$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnaliseSintatica$result;

      /* select the action based on the action number */
      switch (CUP$AnaliseSintatica$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("unaryOperator",36, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unaryOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("unaryOperator",36, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // multiplyOperator ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("multiplyOperator",37, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // multiplyOperator ::= TIMES 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("multiplyOperator",37, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // addOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("addOperator",38, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // addOperator ::= PLUS 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("addOperator",38, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relationalOperator ::= GE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // relationalOperator ::= LE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // relationalOperator ::= NE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relationalOperator ::= EQ 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalOperator",39, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logicalOperator ::= IMPLIES 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logicalOperator ::= XOR 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("logicalOperator",40, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expressionParameterAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("expressionParameterAux",31, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expressionParameterAux ::= COMMA IDENTIFIER expressionParameterAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("expressionParameterAux",31, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expressionParameterAux ::= COMMA oclExpression expressionParameterAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("expressionParameterAux",31, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expressionParameter ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("expressionParameter",30, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expressionParameter ::= IDENTIFIER expressionParameterAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("expressionParameter",30, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expressionParameter ::= oclExpression expressionParameterAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("expressionParameter",30, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // colonPathName ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("colonPathName",43, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // colonPathName ::= COLON pathName 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("colonPathName",43, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaratorAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("declaratorAux",28, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaratorAux ::= COMMA IDENTIFIER declaratorAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("declaratorAux",28, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declarator ::= IDENTIFIER declaratorAux colonPathName BAR oclExpression 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("declarator",27, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-4)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // propertyCallParameters ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",26, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // propertyCallParameters ::= LEFT_PAR declarator expressionParameter RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",26, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-3)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // propertyCallParameters ::= LEFT_PAR expressionParameter RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("propertyCallParameters",26, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // qualifiers ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("qualifiers",32, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // qualifiers ::= LEFT_BRK expressionParameter RIGHT_BRK 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("qualifiers",32, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // propertyCall ::= pathName qualifiers propertyCallParameters 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("propertyCall",25, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ifExp ::= IF oclExpression THEN oclExpression ELSE oclExpression ENDIF 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("ifExp",12, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-6)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literalCollection ::= collectionTypeIdentifier LEFT_BRA expressionParameter RIGHT_BRA 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("literalCollection",29, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-3)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // primaryExpression ::= ifExp 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primaryExpression ::= SELF 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primaryExpression ::= LEFT_PAR oclExpression RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primaryExpression ::= propertyCall 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primaryExpression ::= literal 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primaryExpression ::= literalCollection 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryExpression",33, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operationCall ::= DOT 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("operationCall",24, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operationCall ::= COLLECTIONOPERATION 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("operationCall",24, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // postfixExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("postfixExpressionAux",23, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // postfixExpressionAux ::= operationCall propertyCall postfixExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("postfixExpressionAux",23, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // postfixExpression ::= primaryExpression postfixExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("postfixExpression",22, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unaryExpression ::= postfixExpression 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("unaryExpression",34, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unaryExpression ::= unaryOperator postfixExpression 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("unaryExpression",34, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // multiplicativeExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("multiplicativeExpressionAux",21, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // multiplicativeExpressionAux ::= multiplyOperator unaryExpression multiplicativeExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("multiplicativeExpressionAux",21, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // multiplicativeExpression ::= unaryExpression multiplicativeExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",20, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // additiveExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("additiveExpressionAux",19, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // additiveExpressionAux ::= addOperator multiplicativeExpression additiveExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("additiveExpressionAux",19, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // additiveExpression ::= multiplicativeExpression additiveExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("additiveExpression",18, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relationalExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalExpressionAux",17, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relationalExpressionAux ::= relationalOperator additiveExpression relationalExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalExpressionAux",17, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relationalExpression ::= additiveExpression relationalExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("relationalExpression",16, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // oclExpressionAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("oclExpressionAux",35, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // oclExpressionAux ::= logicalOperator relationalExpression oclExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("oclExpressionAux",35, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // oclExpression ::= relationalExpression oclExpressionAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("oclExpression",6, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variableDeclaration ::= IDENTIFIER COLON typeName 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("variableDeclaration",15, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literal ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= INTEGER 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= REAL 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primaryTypes ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primaryTypes ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primaryTypes ::= REALTYPE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // primaryTypes ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("primaryTypes",42, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // typeName ::= collectionType 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("typeName",14, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // typeName ::= pathName 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("typeName",14, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typeName ::= primaryTypes 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("typeName",14, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // collectionTypeIdentifier ::= COLLECTION 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("collectionTypeIdentifier",11, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // collectionType ::= collectionTypeIdentifier LEFT_PAR typeName RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("collectionType",13, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-3)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= variableDeclaration COMMA parameters 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= variableDeclaration 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("parameters",7, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operationParAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("operationParAux",5, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operationParAux ::= parameters 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("operationParAux",5, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operation ::= IDENTIFIER pathNameOperation LEFT_PAR operationParAux RIGHT_PAR COLON typeName 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("operation",4, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-6)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bodyDeclaration ::= BODY COLON oclExpression 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("bodyDeclaration",3, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contextDeclaration ::= CONTEXT operation bodyDeclaration 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-2)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pathNameOperation ::= PATHNAME pathName 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("pathNameOperation",10, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pathNameAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("pathNameAux",9, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pathNameAux ::= PATHNAME pathName 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("pathNameAux",9, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pathName ::= IDENTIFIER pathNameAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("pathName",8, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // packageDeclarationAux ::= 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("packageDeclarationAux",1, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // packageDeclarationAux ::= contextDeclaration packageDeclarationAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("packageDeclarationAux",1, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // packageDeclaration ::= packageDeclarationAux 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // packageDeclaration ::= PACKAGE pathName packageDeclarationAux ENDPACKAGE 
            {
              Object RESULT =null;

              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-3)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          return CUP$AnaliseSintatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= packageDeclaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)).value;
		RESULT = start_val;
              CUP$AnaliseSintatica$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.elementAt(CUP$AnaliseSintatica$top-1)), ((java_cup.runtime.Symbol)CUP$AnaliseSintatica$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnaliseSintatica$parser.done_parsing();
          return CUP$AnaliseSintatica$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

