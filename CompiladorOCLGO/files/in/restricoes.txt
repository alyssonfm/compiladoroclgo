package Behavioral_Elements::Activity_Graphs

context Person::getSon(): Set(Person)
body: Person.allInstances->select(s | s.father = self or s.mother = self)
				
context TestSession::numberOfScoresOverTarget(target : Integer) : Integer
body: results->select(compositeScore > target)->size()

context ObjectFlowState::getTrue(): Boolean
body: self.allPreviousLeafStates->size() > 0

context Quarto::obterQuartosLivres(entrada: Date, saída : Date, numPessoas : Integer): Set(Quarto)
body: Quarto.allInstances->select( q | q.capacidade>numPessoas and q.estadia_Quarto
						 ->exists( e | DateInterval.disjoint(e.data_de_entrada, e.data_de_saída, entrada, saída, true))

					 
context TestSession::testResultsForTeam(testTeam : Team) : Set(TestResult)
body: results->select(team = testTeam)	
		
context TestSession::averageScoreForTeam(testTeam : Team) : Real
body: testResultsForTeam(testTeam).compositeScore->sum() / testResultsForTeam(testTeam)->size()	

context TestSession::bestResults() : Set(TestResult)
body: results->select(compositeScore = results->sortedBy(compositeScore)->last().compositeScore)

context MyType::a(): Set(Set(Integer))
body: Set {Set{1, 2, 3}, Set{3, 4, 5}, Set{4, 5, 6}}

context ItemAnalyzer::averagePrice() : Money
body: items.basePrice()->sum() / items.basePrice()->size()

context ItemAnalyzer::uniqueModDescriptions() : Set(String)
body: items.modDescriptions()->flatten()->asSet()

context Sale::total() : Money
body: subtotal() + tax()

context Sale::tax() : Money
body: subtotal() * Tax::localRate

context Sale::subtotal() : Money
body: items.price()->sum()

context LoyaltyAccount::getCustomerName() : String 
body: Membership.card.owner.name 



context LineItem::price() : Money
body: basePrice() + modsPrice()

context LineItem::modsPrice() : Money
body: modifiers.price()->sum()

context LineItem::basePrice() : Money
body:
if size = DrinkSize::Small then
	if flavor = Flavor::Regular then
		Money::newInstance(1.23, Currency::USDollars)
	else
		Money::newInstance(1.73, Currency::USDollars)
    endif
else
	if flavor = Flavor::Regular then
		Money::newInstance(2.43, Currency::USDollars)
	else
		Money::newInstance(3.13, Currency::USDollars)
	endif
endif

context LargeRegularLemonade::basePrice() : Money
body: Money::newInstance(2.43, Currency::USDollars)

context SmallFlavoredLemonade::basePrice() : Money
body: Money::newInstance(1.72, Currency::USDollars)

context TestSession::numberOfScoresOverTarget(target : Integer) : Integer
body: results->select(compositeScore > target)->size()

context LoyaltyProgram::getServices(pp: ProgramPartner): Set(Service)
body: if partners->includes(pp)
		then pp.deliveredServices
      else Set
      endif
	  
context LoyaltyProgram: getServicesByLevel(levelName: String): Set(Service)
body: levels->select( name = levelName ).availableServices->asSet()

context Person::getChildren(): Set(Person)
body: Person.allInstances->select(s | s.father = self or s.mother = self)

context ObjectFlowState::getTrue(): Boolean
body: source->exists(it|body)

context TeamMember : disjoint (m1 : Meeting, m2 : Meeting) : Boolean
body: (m1.start + m1.duration <= m2.start) or (m2.start + m2.duration <= m1.start)

context Person::getCurrentSpouse() : Person
body:  self.mariages->select( m | m.ended = false ).spouse

context Trem::comprimentoTotal() : Integer 
body: vagoes.comprimentoTotal()->sum() +  locomotivas.comprimentoTotal()->sum()

context CDJogo::taxaAluguel(data : Date) : Real 
body:  
if data.month = 1 
      then 0 
      else self.jogo.taxa 
endif

context DVD::taxaAluguel(data : Date) : Real 
body: 
   if data.dowIsBetween(DayOfWeek::Monday, DayOfWeek::Thursday)  
      then self.filme.categoria.taxaNormal 
      else self.filme.categoria.taxaFimSemana 
	endif
	
context DVD::taxaAluguel(data : Date) : Real
body: self.vertices->forAll(p1, p2 | (p1.x = p2.x and p1.y = p2.y) implies p1 = p2)

context DVD::taxaAluguel(data : Date) : Real 
body: Polygon.allInstances->select(p : Polygon | p.vertices->size = 3

context DVD::taxaAluguel(data : Date) : Real 
body: self.employeeRanking[employees]->sum() > 0

context DVD::taxaAluguel(data : Date) : Real 
body: employeeRanking[employees]->exists(score = 10)

context DVD::taxaAluguel(data : Date) : Real 
body: partners.deliveredservices->	forAll(pointsEarned = 0 and pointsBurned = 0)
		  implies Membership.account->isEmpty()

context DVD::taxaAluguel(data : Date) : Real 
body: self.employee->forAll (e1 | self.employee->forAll (e2 |
                e1 <> e2 implies e1.forename <> e2.forename))
				
context DVD::taxaAluguel(data : Date) : Real 
body: select(code.substring(1,2) = ‘CS’).credit?sum( ) >= 90
						 
endpackage
 
