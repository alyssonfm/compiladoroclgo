
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 30 22:33:42 GMT-03:00 2011
//----------------------------------------------------

package analise_sintatica;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 30 22:33:42 GMT-03:00 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\020\004" +
    "\000\002\021\004\000\002\021\002\000\002\004\004\000" +
    "\002\010\011\000\002\010\010\000\002\011\003\000\002" +
    "\011\002\000\002\012\003\000\002\012\002\000\002\016" +
    "\003\000\002\016\005\000\002\045\003\000\002\045\003" +
    "\000\002\046\006\000\002\046\004\000\002\047\004\000" +
    "\002\047\002\000\002\013\003\000\002\044\006\000\002" +
    "\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\ufffd\004\006\006\010\001\002\000" +
    "\010\002\ufffd\005\ufffd\006\010\001\002\000\004\002\060" +
    "\001\002\000\004\052\017\001\002\000\004\002\uffff\001" +
    "\002\000\004\052\012\001\002\000\010\002\ufff9\005\ufff9" +
    "\006\ufff9\001\002\000\006\014\015\015\013\001\002\000" +
    "\006\020\ufff5\052\023\001\002\000\004\015\021\001\002" +
    "\000\004\052\017\001\002\000\020\002\ufffb\005\ufffb\006" +
    "\ufffb\012\ufffb\015\ufffb\020\ufffb\024\ufffb\001\002\000\022" +
    "\002\ufffa\005\ufffa\006\ufffa\012\ufffa\014\015\015\ufffa\020" +
    "\ufffa\024\ufffa\001\002\000\020\002\ufffc\005\ufffc\006\ufffc" +
    "\012\ufffc\015\ufffc\020\ufffc\024\ufffc\001\002\000\006\020" +
    "\ufff5\052\023\001\002\000\004\020\ufff6\001\002\000\012" +
    "\012\uffeb\013\044\020\uffeb\024\uffeb\001\002\000\004\020" +
    "\030\001\002\000\006\012\026\020\ufff2\001\002\000\004" +
    "\052\023\001\002\000\004\020\ufff1\001\002\000\004\013" +
    "\031\001\002\000\014\002\ufff3\005\ufff3\006\ufff3\010\032" +
    "\052\017\001\002\000\004\015\uffe8\001\002\000\010\002" +
    "\ufff4\005\ufff4\006\ufff4\001\002\000\004\015\040\001\002" +
    "\000\016\002\ufff0\005\ufff0\006\ufff0\012\ufff0\020\ufff0\024" +
    "\ufff0\001\002\000\016\002\uffef\005\uffef\006\uffef\012\uffef" +
    "\020\uffef\024\uffef\001\002\000\010\002\ufff8\005\ufff8\006" +
    "\ufff8\001\002\000\006\010\032\052\017\001\002\000\004" +
    "\020\042\001\002\000\016\002\uffe9\005\uffe9\006\uffe9\012" +
    "\uffe9\020\uffe9\024\uffe9\001\002\000\010\012\uffed\020\uffed" +
    "\024\046\001\002\000\006\010\032\052\017\001\002\000" +
    "\010\012\uffec\020\uffec\024\uffec\001\002\000\004\052\050" +
    "\001\002\000\006\012\uffee\020\uffee\001\002\000\006\012" +
    "\uffea\020\uffea\001\002\000\004\020\052\001\002\000\004" +
    "\013\053\001\002\000\014\002\ufff3\005\ufff3\006\ufff3\010" +
    "\032\052\017\001\002\000\010\002\ufff7\005\ufff7\006\ufff7" +
    "\001\002\000\006\005\ufffd\006\010\001\002\000\004\005" +
    "\057\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002\000\006\002\ufffe\005\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\004\003\006\004\003\001\001\000" +
    "\006\003\060\004\003\001\001\000\002\001\001\000\004" +
    "\020\054\001\001\000\002\001\001\000\004\010\010\001" +
    "\001\000\002\001\001\000\004\021\013\001\001\000\010" +
    "\011\050\016\021\046\024\001\001\000\002\001\001\000" +
    "\004\020\015\001\001\000\002\001\001\000\004\021\017" +
    "\001\001\000\002\001\001\000\010\011\023\016\021\046" +
    "\024\001\001\000\002\001\001\000\004\047\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\026\046" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\036\020\034\024\033\044\035\045\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\034\024\033\044\035\045\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\034\024" +
    "\033\044\035\045\044\001\001\000\002\001\001\000\004" +
    "\013\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\053\020\034" +
    "\024\033\044\035\045\032\001\001\000\002\001\001\000" +
    "\006\003\055\004\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public void report_error(String message, Object info) {
		Util.report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		Util.syntax_error(cur_token);
	}

	public void debug_message(String mess) {
		Util.debug_message(mess);
	}

	public void debug_shift(Symbol shift_tkn) {
		Util.debug_shift(shift_tkn);
	}

	public void debug_reduce(int prod_num, int nt_num, int rhs_size) {
		Util.debug_reduce(prod_num, nt_num, rhs_size);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // collectionTypeIdentifier ::= COLLECTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionTypeIdentifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // collectionType ::= collectionTypeIdentifier LEFT_PAR typeName RIGHT_PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collectionType",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // oclExpression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("oclExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variableDeclarationTypeAux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationTypeAux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variableDeclarationTypeAux ::= COLON typeName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclarationTypeAux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variableDeclaration ::= IDENTIFIER variableDeclarationTypeAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variableDeclaration ::= IDENTIFIER variableDeclarationTypeAux EQ oclExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typeName ::= collectionType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typeName ::= pathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameters ::= variableDeclaration COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= variableDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operationTypeAux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationTypeAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operationTypeAux ::= typeName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationTypeAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operationParAux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationParAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operationParAux ::= parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operationParAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operation ::= IDENTIFIER LEFT_PAR operationParAux RIGHT_PAR COLON operationTypeAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operation ::= IDENTIFIER pathNameAux LEFT_PAR operationParAux RIGHT_PAR COLON operationTypeAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contextDeclaration ::= CONTEXT operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contextDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pathNameAux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathNameAux",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pathNameAux ::= PATHNAME pathName 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathNameAux",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pathName ::= IDENTIFIER pathNameAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pathName",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // packageDeclarationAux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageDeclarationAux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // packageDeclarationAux ::= contextDeclaration packageDeclarationAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageDeclarationAux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // packageDeclaration ::= packageDeclarationAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // packageDeclaration ::= PACKAGE pathName packageDeclarationAux ENDPACKAGE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageDeclaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= packageDeclaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

